/*
 * Outline API
 * # Introduction  The Outline API is structured in an RPC style. It enables you to programatically interact with all aspects of Outline’s data – in fact, the main application is built on exactly the same API.  The API structure is available as an  [openapi specification](https://github.com/outline/openapi) if that’s your  jam – it can be used to generate clients for most programming languages.  # Making requests  Outline’s API follows simple RPC style conventions where each API endpoint is a method on `https://app.getoutline.com/api/method`. Both `GET` and `POST`  methods are supported but it’s recommended that you make all call using POST. Only HTTPS is supported and all response payloads are JSON.  When making `POST` requests, request parameters are parsed depending on Content-Type header. To make a call using JSON payload, you must pass Content-Type: application/json header, here’s an example using CURL:  ``` curl https://app.getoutline.com/api/documents.info -X POST -H 'authorization: Bearer MY_API_KEY' -H 'content-type: application/json' -H 'accept: application/json' -d '{\"id\": \"outline-api-NTpezNwhUP\"}' ```  Or, with JavaScript:  ```javascript const response = await fetch(\"https://app.getoutline.com/api/documents.info\", {   method: \"POST\",   headers: {     Accept: \"application/json\",     \"Content-Type\": \"application/json\",     Authorization: 'Bearer MY_API_KEY'   } })  const body = await response.json(); const document = body.data; ```  # Authentication  To access API endpoints, you must provide a valid API key. You can create new API keys in your [account settings](https://app.getoutline.com/settings). Be careful when handling your keys as they give access to all of your documents, you should treat them like passwords and they should never be committed to source control.  To authenticate with API, you can supply the API key as a header (`Authorization: Bearer YOUR_API_KEY`) or as part of the payload using `token`  parameter. Header based authentication is highly recommended so that your keys don’t accidentally leak into logs.  Some API endpoints allow unauthenticated requests for public resources and they can be called without an API key.  # Errors  All successful API requests will be returned with a 200 or 201 status code and `ok: true` in the response payload. If there’s an error while making the request, the appropriate status code is returned with the error message:  ``` {   \"ok\": false,   \"error: \"Not Found\" } ```  # Pagination  Most top-level API resources have support for \"list\" API methods. For instance, you can list users, documents, and collections. These list methods share common parameters, taking both `limit` and `offset`.  Responses will echo these parameters in the root `pagination` key, and also include a `nextPath` key which can be used as a handy shortcut to fetch the next page of results. For example:  ``` {   ok: true,   status: 200,   data: […],   pagination: {     limit: 25,     offset: 0,     nextPath: \"/api/documents.list?limit=25&offset=25\"   } } ```  # Policies  Many API resources have associated \"policies\", these objects describe the current API keys authorized actions related to an individual resource. It should be noted that the policy \"id\" is identical to the resource it is related to, policies themselves do not have unique identifiers.  For most usecases of the API, policies can be safely ignored. Calling unauthorized methods will result in the appropriate response code – these are used in the main Outline UI to adjust which elements are visible. 
 *
 * OpenAPI spec version: 0.1.0
 * Contact: hello@getoutline.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse20032} from '../model/InlineResponse20032';
import {InlineResponse20033} from '../model/InlineResponse20033';
import {UsersActivateBody} from '../model/UsersActivateBody';
import {UsersDeleteBody} from '../model/UsersDeleteBody';
import {UsersDemoteBody} from '../model/UsersDemoteBody';
import {UsersInfoBody} from '../model/UsersInfoBody';
import {UsersListBody} from '../model/UsersListBody';
import {UsersPromoteBody} from '../model/UsersPromoteBody';
import {UsersSuspendBody} from '../model/UsersSuspendBody';
import {UsersUpdateBody} from '../model/UsersUpdateBody';

/**
* Users service.
* @module api/UsersApi
* @version 0.1.0
*/
export class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the usersActivatePost operation.
     * @callback moduleapi/UsersApi~usersActivatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate a user
     * Activating a previously suspended user allows them to signin again. Users that are activated will cause billing totals to be re-calculated in the hosted version.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersActivateBody} opts.body 
     * @param {module:api/UsersApi~usersActivatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersActivatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['http'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/users.activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersDeletePost operation.
     * @callback moduleapi/UsersApi~usersDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Deleting a user removes the object entirely. In almost every circumstance it is preferable to suspend a user, as a deleted user can be recreated by signing in with SSO again.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersDeleteBody} opts.body 
     * @param {module:api/UsersApi~usersDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersDeletePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['http'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/users.delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersDemotePost operation.
     * @callback moduleapi/UsersApi~usersDemotePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Demote a user
     * Demote a team admin to regular user permissions. This endpoint is only available for admin users.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersDemoteBody} opts.body 
     * @param {module:api/UsersApi~usersDemotePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersDemotePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['http'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/users.demote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersInfoPost operation.
     * @callback moduleapi/UsersApi~usersInfoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersInfoBody} opts.body 
     * @param {module:api/UsersApi~usersInfoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersInfoPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['http'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/users.info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersListPost operation.
     * @callback moduleapi/UsersApi~usersListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users
     * List and filter all the users in the team
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersListBody} opts.body 
     * @param {module:api/UsersApi~usersListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersListPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['http'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/users.list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersPromotePost operation.
     * @callback moduleapi/UsersApi~usersPromotePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote a user
     * Promote a user to be a team admin. This endpoint is only available for admin users.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersPromoteBody} opts.body 
     * @param {module:api/UsersApi~usersPromotePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersPromotePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['http'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/users.promote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersSuspendPost operation.
     * @callback moduleapi/UsersApi~usersSuspendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend a user
     * Suspending a user prevents the user from signing in. Users that are suspended are also not counted against billing totals in the hosted version.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSuspendBody} opts.body 
     * @param {module:api/UsersApi~usersSuspendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersSuspendPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['http'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/users.suspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUpdatePost operation.
     * @callback moduleapi/UsersApi~usersUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * Update a users name or avatar. No &#x60;id&#x60; is required as it is only possible to update the current user at this time.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersUpdateBody} opts.body 
     * @param {module:api/UsersApi~usersUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersUpdatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['http'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/users.update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}